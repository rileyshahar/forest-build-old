<?xml version="1.0" encoding="UTF-8"?>
<?xml-stylesheet type="text/xsl" href="forest.xsl"?>
<tree expanded="true" show_heading="true" show_metadata="true" toc="false" root="false"><frontmatter> <anchor>356</anchor> <addr>my-work</addr>  <route>my-work.xml</route>  <authors><author><link href="rileyshahar.xml" type="local">Riley Shahar</link></author> </authors> <title>My Work</title> <meta name="author">false</meta></frontmatter> <mainmatter>  <tree expanded="true" show_heading="false" show_metadata="false" toc="false" root="false"><frontmatter> <anchor>358</anchor>       </frontmatter> <mainmatter><tree expanded="false" show_heading="true" show_metadata="true" toc="false" root="false" taxon="Talk"><frontmatter> <anchor>360</anchor> <addr>shahar-2023-reed</addr>  <route>shahar-2023-reed.xml</route> <date>September 12, 2023</date> <authors><author><link href="rileyshahar.xml" type="local">Riley Shahar</link></author> </authors> <title>Categorical phase semantics for linear logic</title> <meta name="venue"><link href="https://www.reed.edu/computer-science/seminars/" type="external">Reed CS Colloquium</link></meta><meta name="tex">https://github.com/rileyshahar/phase-semantics-talk</meta><meta name="slides">/slides/shahar-2023-reed.pdf</meta></frontmatter> <mainmatter><p>Linear logic is a logic of limited resources, useful in practice for writing
safe programs. Girard's phase semantics, which may be instantiated with any
(classical) monoid, are a canonical model of this logic. We give a categorical
generalization of phase semantics to monoid objects in certain categories,
filling an existing hole in the categorical semantics of linear logic. Along the
way, we introduce and motivate the project of categorical semantics, assuming no
knowledge of category theory or logic. This talk presents research with Steve
Zdancewic at the UPenn PLClub group, supported by the REPL NSF REU site.</p></mainmatter> </tree></mainmatter> </tree></mainmatter> <backmatter><contributions/> <context/> <related/> <backlinks/> <references/></backmatter></tree>